(ns str-project-clojure.utils
  (:require [clojure.java.io :as io]))

(defn do-lines
  [path func]
  (with-open [rdr (io/reader path)]
    (doseq [line (line-seq rdr)]
      (func line))))

(defn avg-time-sec
  [fn iter]
  (let [start (. java.lang.System nanoTime)]
    (doseq [i (range iter)]
      (fn))
    (/ (double (/ (- (. java.lang.System nanoTime) start)
                  iter))
       1000000000.0)))

(defn subsequences
  [s]
  (let [l (count s)]
    (set
     (for [start (range l)
           end (range 1 (inc l))]
       (take end (drop start s))))))

(defn substrings
  [s]
  (map #(apply str %) (subsequences s)))

(defn inversion
  [dna]
  (apply str
         (reverse (map {\A \C
                        \C \A
                        \T \G
                        \G \T}
                       dna))))